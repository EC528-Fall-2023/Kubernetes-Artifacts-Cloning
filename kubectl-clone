#!/bin/bash

# This script acts as a kubectl plugin for cloning Kubernetes objects

function usage() {
	echo "Usage: kubectl clone [OPTIONS]"
	echo
	echo "Options:"
    	echo "-s, --source          KUBECONFIG of the source cluster."
	echo "-d, --destination     KUBECONFIG of the destination cluster."
	echo "-o, --objects         List of Kubernetes objects to clone (comma separated e.g. pods,services). Use 'all' to clone all objects."
	echo "-l, --labels          Label selector to filter the objects to be cloned (e.g. app=robot-shop)."
	echo "-n, --namespace       Namespace of the objects to be cloned."
	echo "-a, --all             Migrate everything that exists in the source cluster."
	echo "-h, --help            Display this help and exit."
	echo
	echo "Example:"
	echo "kubectl clone -s /path/to/source/kubeconfig -d /path/to/destination/kubeconfig -o pods,services -l app=robot-shop -n my-namespace"
}

function getAllYaml() {
	CLUSTER_CONTEXT="$1"
	kubectl config use-context $CLUSTER_CONTEXT
	result_file="info_of_$CLUSTER_CONTEXT.yaml"

	#check if result_file exists and if it does, remove it
	if [ -f "$result_file" ]; then
		rm -f "$result_file"
	fi

	namespaces=($(kubectl get namespaces -o custom-columns=NAME:.metadata.name --no-headers=true))

	# Get all the resource names from `kubectl api-resources`
	types=("persistentvolumes" "configmaps" "secret" "pods" "deployment" "service" "replicasets" "statefulsets" "daemonsets")
	echo "apiVersion: v1" >> "$result_file"
	echo "items:" >> "$result_file"
	for ns in "${namespaces[@]}"; do
		#Skip system generated namespace(except default)
	        if [[ $ns == "kube-node-lease" ]] || [[ $ns == "kube-public" ]] || [[ $ns == "kube-system" ]]; then
	                continue
	        fi

	        echo "========= NAMESPACE: $ns ========="

		for type in "${types[@]}"; do
			#if type is configmap, skip kube-root-ca.crt
			if [[ $type == "configmaps"  ]]; then
	                        #Get a list of all configmap names, excluding kube-root-ca.crt
	                        #To exclude more file, append "|grep -v '<exclude-name>' to the end of the command"
	                        #or "your_command | grep -Ev 'exclude1|exclude2|exclude3'"
	                       for cm in $(kubectl get configmap -n default --no-headers=true -o custom-columns=NAME:.metadata.name | grep -v 'kube-root-ca.crt'); do
	                                echo "- $(kubectl get configmap -n default "$cm" -o yaml | sed '2,$s/^/  /')"
	                       done
	 		       continue
	                fi
			#if type is service skip service/kubernets, also delete already assigned ip and nodeport
			if [[ $type == "service"  ]]; then
	                        for i in $(kubectl get service -n $ns --no-headers=true -o custom-columns=NAME:.metadata.name | grep -v 'kubernetes'); do
	                                tmp="- $(kubectl get service -n $ns "$i" -o yaml | sed '2,$s/^/  /')"
	                                echo "$tmp" | yq eval 'del(.[].spec.clusterIPs, .[].spec.clusterIP, .[].spec.ports[0].nodePort)'
	                        done
	                        continue
	                fi

			# Capture the output of the kubectl get command
	                check=$(kubectl get "$type" -n $ns 2>&1)
			output=$(kubectl get "$type" -n $ns -o yaml | sed -n '3,$p' | head -n -3 2>&1)

			# Check if the output contains the strings "No resources" or "MethodNotAllowed"
	                if [[ ! $check == *"No resources"* ]] && [[ ! $check == *"MethodNotAllowed"* ]]; then
		                echo "$output"
		        fi
		done >> "$result_file"
	done
	echo "kind: List" >> "$result_file"
	echo "metadata:" >> "$result_file"
	echo "  resourceVersion: \"\"" >> "$result_file"
}

while [[ "$#" -gt 0 ]]; do
	case $1 in
		-s|--source) 
			SRC_KUBECONFIG="$2"; 
			#maybe get the config file based on the src cluster name
			shift 
			;;
		-d|--destination) 
			DEST_KUBECONFIG="$2"; 
			#get the config file of the dest cluster based on the name
			shift
			;;
		-o|--objects) 
			OBJECTS="$2"; 
			shift
			;;
		-l|--labels) 
			LABELS="$2"; 
			shift
			;;
		-n|--namespace) 
			NAMESPACE="$2"; 
			shift
			;;
		-a|--all) 
			ALL=true 
			getAllYaml $SRC_KUBECONFIG
			;;
		-h|--help) 
			usage; 
			exit 0 
			;;
		*) echo "Unknown parameter passed: $1"; usage; exit 1 ;;
	esac
	shift
done

# Check if mandatory options are set
if [[ -z "${SRC_KUBECONFIG}" || -z "${DEST_KUBECONFIG}" ]]; then
	echo "Error: --source and --destination options are mandatory!"
	usage
	exit 1
fi

# Your actual logic for cloning goes here
echo "Cloning objects from source cluster with KUBECONFIG: ${SRC_KUBECONFIG} to destination cluster with KUBECONFIG: ${DEST_KUBECONFIG}..."

# TODO: Implement the logic for cloning the objects based on the provided parameters

